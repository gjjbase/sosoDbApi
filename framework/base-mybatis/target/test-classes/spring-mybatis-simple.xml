<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
	
	<!-- 加载JDBC配置文件 -->
	<context:property-placeholder location="classpath:jdbc-mysql.properties" ignore-unresolvable="true"/>
	<context:component-scan base-package="com.dev" />
	
	<bean id="bonecpDataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="bonecpDataSource" />
		<property name="configLocation" value="classpath:mybatis-cfg.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath*:com/dev/**/*_mapper.xml</value>
			</list>
		</property>
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.dev" />
		<property name="markerInterface" value="com.dev.base.mybatis.dao.BaseMybatisDao" />
	</bean>
	
	<!-- 注解式事务 -->
	<!-- <bean id="springTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="bonecpDataSource" />
	</bean>
	
	<tx:annotation-driven proxy-target-class="true" transaction-manager="springTransactionManager" />
	<aop:aspectj-autoproxy /> -->
	
	<!-- 声明式事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="bonecpDataSource"></property>
	</bean>
	
	<!-- 编程式事务 -->
	<bean class="com.dev.base.mybatis.utils.transaction.TransactionUtils">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	
	<!-- 配置事务切面Bean -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 读取数据方法，一般采用只读事务-->  
			<!-- 启用的话会导致SqlExecDAOImpl.getResultSet获取的连接关闭而抛出异常 --> 
            <!-- <tx:method name="get*" read-only="true"/>   
            <tx:method name="query*" read-only="true"/>   
            <tx:method name="find*" read-only="true"/>   
            <tx:method name="load*" read-only="true"/> -->
            
            <!--以下方法，如save，update，insert等对数据库进行写入操作的方法，当产生Exception时进行回滚 -->   
            <tx:method name="add*"  rollback-for="java.lang.Exception"/>  
            <tx:method name="update*"  rollback-for="java.lang.Exception"/>   
            <tx:method name="delete*"  rollback-for="java.lang.Exception"/>   
            <tx:method name="batch*"  rollback-for="java.lang.Exception"/> 
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<!-- 在service层做事务处理 -->
		<aop:pointcut id="pointCut"
					  expression="execution(* com.dev..service.impl.*Impl.*(..))"/>	
		<aop:advisor advice-ref="txAdvice"
					 pointcut-ref="pointCut"/>
	</aop:config>
</beans>
